#!/usr/bin/env bash

# Associative array (key = value)
declare -A associative_array=(
	[key5]="five"
	[key6]="six"
	[key7]="7"
	[key72]="72"
)

# Access value
echo "Assigning value \"seven\" to key7"
associative_array[key7]="seven"

# Remove value
echo "Removing key[72]"
unset "associative_array[key72]"

# Add value by index
echo "Adding [key8]=\"eight\""
associative_array+=([key8]="eight")

# Print keys
echo "Array keys:"
echo "${!associative_array[@]}"
# return: key6 key7 key5 key8

# Length
echo "associative_array has ${#associative_array[@]} elements" # or ${associative_array[*]}"
# return: associative_array has 4 elements

# Iterating over array
echo "Array content:"
for k in "${!associative_array[@]}"
do
	echo -e " \tkey: $k, value: ${associative_array[${k}]}"
done
# return:
#   Array content:
#           key: key6, value: six
#           key: key7, value: seven
#           key: key5, value: five
#           key: key8, value: eight

# Print all values
echo "${associative_array[@]}" # or ${associative_array[*]}
# return: six seven five eight

# Check if element is present
if [ -n "${associative_array[key8]}" ]
then
  echo "key8 exists"
else
  echo "key8 does not exists"
fi
# return: key8 exists

# Passing as function argument (Bash 4.3 or newer)
function do_something() {
    local -n tmp_array=$1

    for key in "${!tmp_array[@]}"
    do
       echo "Do something with $key:${tmp_array[${key}]}"
    done
}

do_something associative_array
# return:
#   Do something with key6:six
#   Do something with key7:seven
#   Do something with key5:five
#   Do something with key8:eight

# Remove array
unset associative_array


